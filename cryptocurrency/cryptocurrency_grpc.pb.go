// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cryptocurrency

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CryptocurrencyServiceClient is the client API for CryptocurrencyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CryptocurrencyServiceClient interface {
	Create(ctx context.Context, in *CryptocurrencyMessage, opts ...grpc.CallOption) (*CryptocurrencyMessage, error)
	Get(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (*CryptocurrencyMessage, error)
	List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*CryptocurrencyListMessage, error)
	Update(ctx context.Context, in *UpdateCryptocurrencyRequest, opts ...grpc.CallOption) (*CryptocurrencyMessage, error)
	Delete(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (*EmptyMessage, error)
	UpVote(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (*CryptocurrencyMessage, error)
	DownVote(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (*CryptocurrencyMessage, error)
	CreateVoteStream(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (CryptocurrencyService_CreateVoteStreamClient, error)
}

type cryptocurrencyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCryptocurrencyServiceClient(cc grpc.ClientConnInterface) CryptocurrencyServiceClient {
	return &cryptocurrencyServiceClient{cc}
}

func (c *cryptocurrencyServiceClient) Create(ctx context.Context, in *CryptocurrencyMessage, opts ...grpc.CallOption) (*CryptocurrencyMessage, error) {
	out := new(CryptocurrencyMessage)
	err := c.cc.Invoke(ctx, "/cryptocurrency.CryptocurrencyService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptocurrencyServiceClient) Get(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (*CryptocurrencyMessage, error) {
	out := new(CryptocurrencyMessage)
	err := c.cc.Invoke(ctx, "/cryptocurrency.CryptocurrencyService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptocurrencyServiceClient) List(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*CryptocurrencyListMessage, error) {
	out := new(CryptocurrencyListMessage)
	err := c.cc.Invoke(ctx, "/cryptocurrency.CryptocurrencyService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptocurrencyServiceClient) Update(ctx context.Context, in *UpdateCryptocurrencyRequest, opts ...grpc.CallOption) (*CryptocurrencyMessage, error) {
	out := new(CryptocurrencyMessage)
	err := c.cc.Invoke(ctx, "/cryptocurrency.CryptocurrencyService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptocurrencyServiceClient) Delete(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/cryptocurrency.CryptocurrencyService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptocurrencyServiceClient) UpVote(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (*CryptocurrencyMessage, error) {
	out := new(CryptocurrencyMessage)
	err := c.cc.Invoke(ctx, "/cryptocurrency.CryptocurrencyService/UpVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptocurrencyServiceClient) DownVote(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (*CryptocurrencyMessage, error) {
	out := new(CryptocurrencyMessage)
	err := c.cc.Invoke(ctx, "/cryptocurrency.CryptocurrencyService/DownVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cryptocurrencyServiceClient) CreateVoteStream(ctx context.Context, in *CryptocurrencySymbol, opts ...grpc.CallOption) (CryptocurrencyService_CreateVoteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CryptocurrencyService_ServiceDesc.Streams[0], "/cryptocurrency.CryptocurrencyService/CreateVoteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cryptocurrencyServiceCreateVoteStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CryptocurrencyService_CreateVoteStreamClient interface {
	Recv() (*CryptocurrencyNewVoteNotification, error)
	grpc.ClientStream
}

type cryptocurrencyServiceCreateVoteStreamClient struct {
	grpc.ClientStream
}

func (x *cryptocurrencyServiceCreateVoteStreamClient) Recv() (*CryptocurrencyNewVoteNotification, error) {
	m := new(CryptocurrencyNewVoteNotification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CryptocurrencyServiceServer is the server API for CryptocurrencyService service.
// All implementations must embed UnimplementedCryptocurrencyServiceServer
// for forward compatibility
type CryptocurrencyServiceServer interface {
	Create(context.Context, *CryptocurrencyMessage) (*CryptocurrencyMessage, error)
	Get(context.Context, *CryptocurrencySymbol) (*CryptocurrencyMessage, error)
	List(context.Context, *EmptyMessage) (*CryptocurrencyListMessage, error)
	Update(context.Context, *UpdateCryptocurrencyRequest) (*CryptocurrencyMessage, error)
	Delete(context.Context, *CryptocurrencySymbol) (*EmptyMessage, error)
	UpVote(context.Context, *CryptocurrencySymbol) (*CryptocurrencyMessage, error)
	DownVote(context.Context, *CryptocurrencySymbol) (*CryptocurrencyMessage, error)
	CreateVoteStream(*CryptocurrencySymbol, CryptocurrencyService_CreateVoteStreamServer) error
	mustEmbedUnimplementedCryptocurrencyServiceServer()
}

// UnimplementedCryptocurrencyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCryptocurrencyServiceServer struct {
}

func (UnimplementedCryptocurrencyServiceServer) Create(context.Context, *CryptocurrencyMessage) (*CryptocurrencyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCryptocurrencyServiceServer) Get(context.Context, *CryptocurrencySymbol) (*CryptocurrencyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCryptocurrencyServiceServer) List(context.Context, *EmptyMessage) (*CryptocurrencyListMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCryptocurrencyServiceServer) Update(context.Context, *UpdateCryptocurrencyRequest) (*CryptocurrencyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCryptocurrencyServiceServer) Delete(context.Context, *CryptocurrencySymbol) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCryptocurrencyServiceServer) UpVote(context.Context, *CryptocurrencySymbol) (*CryptocurrencyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpVote not implemented")
}
func (UnimplementedCryptocurrencyServiceServer) DownVote(context.Context, *CryptocurrencySymbol) (*CryptocurrencyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownVote not implemented")
}
func (UnimplementedCryptocurrencyServiceServer) CreateVoteStream(*CryptocurrencySymbol, CryptocurrencyService_CreateVoteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateVoteStream not implemented")
}
func (UnimplementedCryptocurrencyServiceServer) mustEmbedUnimplementedCryptocurrencyServiceServer() {}

// UnsafeCryptocurrencyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CryptocurrencyServiceServer will
// result in compilation errors.
type UnsafeCryptocurrencyServiceServer interface {
	mustEmbedUnimplementedCryptocurrencyServiceServer()
}

func RegisterCryptocurrencyServiceServer(s grpc.ServiceRegistrar, srv CryptocurrencyServiceServer) {
	s.RegisterService(&CryptocurrencyService_ServiceDesc, srv)
}

func _CryptocurrencyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptocurrencyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptocurrencyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptocurrency.CryptocurrencyService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptocurrencyServiceServer).Create(ctx, req.(*CryptocurrencyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptocurrencyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptocurrencySymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptocurrencyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptocurrency.CryptocurrencyService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptocurrencyServiceServer).Get(ctx, req.(*CryptocurrencySymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptocurrencyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptocurrencyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptocurrency.CryptocurrencyService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptocurrencyServiceServer).List(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptocurrencyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCryptocurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptocurrencyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptocurrency.CryptocurrencyService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptocurrencyServiceServer).Update(ctx, req.(*UpdateCryptocurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptocurrencyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptocurrencySymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptocurrencyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptocurrency.CryptocurrencyService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptocurrencyServiceServer).Delete(ctx, req.(*CryptocurrencySymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptocurrencyService_UpVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptocurrencySymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptocurrencyServiceServer).UpVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptocurrency.CryptocurrencyService/UpVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptocurrencyServiceServer).UpVote(ctx, req.(*CryptocurrencySymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptocurrencyService_DownVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CryptocurrencySymbol)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CryptocurrencyServiceServer).DownVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cryptocurrency.CryptocurrencyService/DownVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CryptocurrencyServiceServer).DownVote(ctx, req.(*CryptocurrencySymbol))
	}
	return interceptor(ctx, in, info, handler)
}

func _CryptocurrencyService_CreateVoteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CryptocurrencySymbol)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CryptocurrencyServiceServer).CreateVoteStream(m, &cryptocurrencyServiceCreateVoteStreamServer{stream})
}

type CryptocurrencyService_CreateVoteStreamServer interface {
	Send(*CryptocurrencyNewVoteNotification) error
	grpc.ServerStream
}

type cryptocurrencyServiceCreateVoteStreamServer struct {
	grpc.ServerStream
}

func (x *cryptocurrencyServiceCreateVoteStreamServer) Send(m *CryptocurrencyNewVoteNotification) error {
	return x.ServerStream.SendMsg(m)
}

// CryptocurrencyService_ServiceDesc is the grpc.ServiceDesc for CryptocurrencyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CryptocurrencyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cryptocurrency.CryptocurrencyService",
	HandlerType: (*CryptocurrencyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CryptocurrencyService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _CryptocurrencyService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CryptocurrencyService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CryptocurrencyService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CryptocurrencyService_Delete_Handler,
		},
		{
			MethodName: "UpVote",
			Handler:    _CryptocurrencyService_UpVote_Handler,
		},
		{
			MethodName: "DownVote",
			Handler:    _CryptocurrencyService_DownVote_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateVoteStream",
			Handler:       _CryptocurrencyService_CreateVoteStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cryptocurrency/cryptocurrency.proto",
}
